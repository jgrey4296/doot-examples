# -*- mode:toml; -*-

[startup]
doot_version          = "1.1"
loaders               = { commands="default", task="default", parser="default" }
sources               = { tasks=[".tasks"], code=[] }
empty_cmd             = ["run", "example::+.expansion"]

[settings.commands.run]
show = false

[logging]
file              = false
extra.jgdv        = false
extra.matplotlib  = false
extra.PIL         = false

[logging.stream]
level   = "WARNING"
filter  = []
target  = "stdout"
format  ="{levelname:<8}  : {message}"

[logging.printer]
level        = "WARNING"
colour       = true
target       = ["stdout"]
format       = "{message}"
filename_fmt = "doot_printed.log"


[[locations]]

[[tasks.example]]
name  = "+.expansion"
doc   = ["A job with an expansion action",
"Creates a new subtask for each value in 'data'",
"Set count > -1 to limit the number of subtasks",
]
data         = ["a" ,"b", "c", "d"]
inject_vals  = {literal=["blah"]}
template     = "example::_.simple"
actions      = [
    {do="log", msg="Entering Job"},
    # Expand the {template} using the injection {inject_vals}, applying literal values {data}
    {do="dootle.jobs.expand:JobExpandAction", from_="data", update_="subtasks", inject_="inject_vals", template_="template"},
    {do="dootle.jobs.expand:JobQueueAction",  from_="subtasks"},
    {do="log", msg="Subtasks Queued"},
    {do="log", msg="--------------------------"},
]
head-actions  = [{do="log", msg="Job Head"}]
cleanup       = [{do="log", msg="Job Cleanup"}]

[[tasks.example]]
name     = "_.simple"
blah     = "hello"
depends_on = ["example::_.simple.dep"]
actions  = [
    {do="log", msg="SubTask. {_task_name}"},
    {do="log", msg="Expansion value: blah = {blah}"},
    {do="log", msg="--------------------------"},
]
head-actions = [{do="log", msg="Subtask Head: {blah}"}]
cleanup = [{do="log", msg="Subtask Cleanup: {blah}"}]

[[tasks.example]]
name     = "_.simple.dep"
actions  = [
    {do="log", msg="Subtask Dependency"},
    {do="log", msg="--------------------------"},
]

[[tasks.example]]
name          = "_.head.response"
required_for  = ["example::+.expansion..$head$..$cleanup$"]
actions       = [{do="log", msg="Head Cleanup Dependency"}]
