# -*- mode:toml; -*-
[startup]
doot_version  = "1.1"
loaders       = { commands="default", task="default", parser="default" }
sources       = { tasks=[".tasks"], code=[] }
empty_cmd     = ["run", "inject::top"]

[startup.plugins]
# Allows for defining aliases
command        = { tasks="doot.cmds.list_cmd:ListCmd"}

[shutdown]
notify           = { speak=false } # success_msg="", fail_msg=""
defaulted_values = { write=false, path=".defaulted_values.toml" }

[settings.commands]
[settings.commands.run]
tracker     = "default"
runner      = "default"
reporter    = "default"
report-line = []

[settings.commands.list]
hide     = []
aliases  = { tasks=[] }

[logging]
file = false
[logging.stream]
level = "user"
filter = []
target = "stdout"
format="{levelname:<8} : {message}"

[logging.printer]
level        = "WARNING"
colour       = true
target       = ["stdout"]
format       = "{message}"
filename_fmt = "doot_printed.log"

[[tasks.inject]]
name         = "top"
blah         = "inject::top spec's direct value"
bloo         = "{aweg}"
aweg         = "{blee}"
blee         = "Immediate Expansion in inject::top"
depends_on   = [
    {task="inject::_.target"},
    # # Source expansion:  blah -> expanded(blah)
    {task="inject::_.target", inject={from_spec=["blah"], suffix="simple.list.injection"}},
    # # Source remapping:  blah -> expanded(bloo)
    {task="inject::_.target", inject={from_spec={blah="{bloo}"}, suffix="dict.map.injection"}},
    # # Target remapping:  blah -> l1(bloo_) -> aweg -> expanded(aweg, source=inject::_.target)
    {task="inject::_.target", inject={from_target={blah="{bloo}"}, suffix="direct.delayed"}},
    # # Literal insertion: blah -> 'a direct insertion'
    {task="inject::_.target", inject={literal={blah="literal insertion"}, suffix="insertion"}},
    # # Literal insertion with keys: blah -> 'literal with key: {other}' -
    {task="inject::_.target", inject={literal={blah="literal with key: {other}"}, suffix="insertion"}},
]

[[tasks.inject]]
name        = "_.target"
doc         = [
    "When run on its own, will message 'default blah'.",
    "When run from inject::top, will message values based on the injection.",
]
blah     = "inject::_.target's default value"
aweg     = "inject::_target's Late Expansion"
other    = "other"
info     = "A default info message"
actions  = [
    # Log action format: {do="log", msg="{info}"},
    {do="log", msg="The Value of blah is: {blah}"}
]
